[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "aioplus"
version = "0.7.0"
description = "Because asyncio.gather() is not enough!"
license = "MIT"
authors = ["Sergei Y. Bogdanov <syubogdanov@outlook.com>"]
maintainers = ["Sergei Y. Bogdanov <syubogdanov@outlook.com>"]
readme = "README.md"
homepage = "https://github.com/syubogdanov/aioplus"
repository = "https://github.com/syubogdanov/aioplus"
documentation = "https://aioplus.readthedocs.io"
keywords = [
    "async",
    "asyncio",
    "builtins",
    "concurrency",
    "concurrent",
    "executor",
    "futures",
    "iteration",
    "iterator",
    "itertools",
    "python",
    "python3",
    "stdlib",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries",
    "Topic :: Utilities",
    "Typing :: Typed",
]

[tool.poetry.dependencies]
python = ">=3.11"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
black = "^25.9"
mypy = "^1.18"
ruff = "^0.14"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^8.4"
pytest-asyncio = "^1.1"

[tool.black]
line-length = 100
target-version = ["py311"]

[tool.mypy]
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
explicit_package_bases = true
no_implicit_optional = true
python_version = "3.11"
strict_equality = true
warn_unused_ignores = true

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
ignore = [
    "A005",     # Module {name} shadows a Python standard-library module.
    "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed in {name}.
    "BLE001",   # Checks for `except` clauses that catch all exceptions.
    "D100",     # Missing docstring in public module.
    "D104",     # Missing docstring in public package.
]
select = ["ALL"]

[tool.ruff.lint.isort]
lines-after-imports = 2
lines-between-types = 1

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.per-file-ignores]
"docs/**/*.py" = ["ALL"]
"tests/**/test_*.py" = ["S101"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pylint]
allow-magic-value-types = ["bytes", "int", "str"]
max-args = 8
max-branches = 14
